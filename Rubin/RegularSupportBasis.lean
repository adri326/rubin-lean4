/-
This files defines `RegularSupportBasis`, which is a basis of the topological space Œ±,
made up of finite intersections of `RegularSupport Œ± g` for `g : G`.
-/

import Mathlib.Topology.Basic
import Mathlib.Topology.Homeomorph
import Mathlib.Topology.Algebra.ConstMulAction

import Rubin.LocallyDense
import Rubin.Topology
import Rubin.Support
import Rubin.RegularSupport

namespace Rubin

/--
Maps a "seed" of homeorphisms in Œ± to the intersection of their regular support in Œ±.

Note that the condition that the resulting set is non-empty is introduced later in `RegularSupportBasis‚ÇÄ`
--/
def RegularSupport.FiniteInter {G : Type _} [Group G] (Œ± : Type _) [TopologicalSpace Œ±] [MulAction G Œ±] (S : Finset G): Set Œ± :=
  ‚ãÇ (g ‚àà S), RegularSupport Œ± g

def RegularSupportBasis (G Œ± : Type _) [Group G] [TopologicalSpace Œ±] [MulAction G Œ±] : Set (Set Œ±) :=
  { S : Set Œ± | S.Nonempty ‚àß ‚àÉ (seed : Finset G), S = RegularSupport.FiniteInter Œ± seed }

variable {G : Type _}
variable {Œ± : Type _}
variable [Group G]
variable [TopologicalSpace Œ±]
variable [MulAction G Œ±]

theorem RegularSupport.FiniteInter_sInter (S : Finset G) :
  RegularSupport.FiniteInter Œ± S = ‚ãÇ‚ÇÄ ((fun (g : G) => RegularSupport Œ± g) '' S) :=
by
  rw [Set.sInter_image]
  rfl

theorem RegularSupportBasis.mem_iff (S : Set Œ±) :
  S ‚àà RegularSupportBasis G Œ± ‚Üî S.Nonempty ‚àß ‚àÉ (seed : Finset G), S = RegularSupport.FiniteInter Œ± seed :=
by
  simp only [RegularSupportBasis, Set.mem_setOf_eq]

@[simp]

theorem RegularSupport.FiniteInter_regular (F : Finset G) :
  Regular (RegularSupport.FiniteInter Œ± F) :=
by
  rw [RegularSupport.FiniteInter_sInter]
  apply regular_sInter
  ¬∑ have set_decidable : DecidableEq (Set Œ±) := Classical.typeDecidableEq (Set Œ±)
    let fin : Finset (Set Œ±) := F.image ((fun g => RegularSupport Œ± g))

    apply Set.Finite.ofFinset fin
    simp
  ¬∑ intro S S_in_set
    simp at S_in_set
    let ‚ü®g, ‚ü®_, Heq‚ü©‚ü© := S_in_set
    rw [‚ÜêHeq]
    exact regularSupport_regular Œ± g

@[simp]
theorem RegularSupportBasis.regular {S : Set Œ±} (S_mem_basis : S ‚àà RegularSupportBasis G Œ±) : Regular S := by
  let ‚ü®_, ‚ü®seed, S_eq_inter‚ü©‚ü© := (RegularSupportBasis.mem_iff S).mp S_mem_basis
  rw [S_eq_inter]
  apply RegularSupport.FiniteInter_regular

variable [ContinuousConstSMul G Œ±] [DecidableEq G]

lemma RegularSupport.FiniteInter_conj (seed : Finset G) (f : G):
  RegularSupport.FiniteInter Œ± (Finset.image (fun g => f * g * f‚Åª¬π) seed) = f ‚Ä¢'' RegularSupport.FiniteInter Œ± seed :=
by
  unfold RegularSupport.FiniteInter
  simp
  conv => {
    rhs
    ext; lhs; ext x; ext; lhs
    ext
    rw [regularSupport_smulImage]
  }

/--
A group element `f` acts on sets of `RegularSupportBasis G Œ±`,
by mapping each element `g` of `S.seed` to `f * g * f‚Åª¬π`
--/
noncomputable instance RegularSupportBasis.instSmul : SMul G (RegularSupportBasis G Œ±) where
  smul := fun f S =>
    let new_seed := (Finset.image (fun g => f * g * f‚Åª¬π) S.prop.right.choose)
    ‚ü®
      RegularSupport.FiniteInter Œ± new_seed,
      by
        rw [RegularSupportBasis.mem_iff]
        nth_rw 1 [RegularSupport.FiniteInter_conj, smulImage_nonempty]
        rw [‚ÜêS.prop.right.choose_spec]

        constructor
        ¬∑ exact S.prop.left
        ¬∑ use new_seed
    ‚ü©

theorem RegularSupportBasis.smul_eq' (f : G) (S : RegularSupportBasis G Œ±) :
  (f ‚Ä¢ S).val
    = RegularSupport.FiniteInter Œ± (Finset.image (fun g => f * g * f‚Åª¬π) S.prop.right.choose) := rfl

theorem RegularSupportBasis.smul_eq (f : G) (S : RegularSupportBasis G Œ±) :
  (f ‚Ä¢ S).val = f ‚Ä¢'' S.val :=
by
  rw [RegularSupportBasis.smul_eq']
  rw [RegularSupport.FiniteInter_conj]
  rw [‚ÜêS.prop.right.choose_spec]

theorem RegularSupportBasis.smulImage_in_basis {U : Set Œ±} (U_in_basis : U ‚àà RegularSupportBasis G Œ±)
  (f : G) : f ‚Ä¢'' U ‚àà RegularSupportBasis G Œ± :=
by
  have eq := smul_eq f ‚ü®U, U_in_basis‚ü©
  simp only at eq
  rw [‚Üêeq]
  exact Subtype.coe_prop _

def RegularSupportBasis.fromSingleton [T2Space Œ±] [FaithfulSMul G Œ±] (g : G) (g_ne_one : g ‚â† 1) : { S : Set Œ± // S ‚àà RegularSupportBasis G Œ± } :=
  let seed : Finset G := {g}
  ‚ü®
    RegularSupport.FiniteInter Œ± seed,
    by
      rw [RegularSupportBasis.mem_iff]
      constructor
      swap
      use seed

      rw [Set.nonempty_iff_ne_empty]
      intro rsupp_empty
      apply g_ne_one
      apply FaithfulSMul.eq_of_smul_eq_smul (Œ± := Œ±)
      intro x
      simp
      rw [‚Üênot_mem_support]
      apply Set.not_mem_subset
      ¬∑ apply support_subset_regularSupport
      ¬∑ simp [RegularSupport.FiniteInter] at rsupp_empty
        rw [rsupp_empty]
        exact Set.not_mem_empty x
  ‚ü©

theorem RegularSupportBasis.fromSingleton_val [T2Space Œ±] [FaithfulSMul G Œ±] (g : G) (g_ne_one : g ‚â† 1) :
  (fromSingleton g g_ne_one).val = RegularSupport Œ± g := by simp [fromSingleton, RegularSupport.FiniteInter]

-- Note: we could potentially implement MulActionHom
noncomputable instance RegularSupportBasis.instMulAction : MulAction G (RegularSupportBasis G Œ±) where
  one_smul := by
    intro S
    apply Subtype.eq
    rw [RegularSupportBasis.smul_eq]
    rw [one_smulImage]
  mul_smul := by
    intro S f g
    apply Subtype.eq
    repeat rw [RegularSupportBasis.smul_eq]
    rw [smulImage_mul]

theorem RegularSupportBasis.smul_mono {S T : RegularSupportBasis G Œ±} (f : G) (S_le_T : S.val ‚äÜ T.val) :
  (f ‚Ä¢ S).val ‚äÜ (f ‚Ä¢ T).val :=
by
  repeat rw [RegularSupportBasis.smul_eq]
  apply smulImage_mono
  assumption

section Basis
open Topology

variable (G Œ± : Type _)
variable [Group G]
variable [TopologicalSpace Œ±] [T2Space Œ±] [LocallyCompactSpace Œ±] [HasNoIsolatedPoints Œ±]
variable [MulAction G Œ±] [LocallyDense G Œ±] [ContinuousConstSMul G Œ±]

-- TODO: clean this lemma to not mention W anymore?
lemma proposition_3_2_subset
  {U : Set Œ±} (U_open : IsOpen U) {p : Œ±} (p_in_U : p ‚àà U) :
  ‚àÉ (W : Set Œ±), W ‚àà ùìù p ‚àß closure W ‚äÜ U ‚àß
  ‚àÉ (g : G), g ‚àà RigidStabilizer G W ‚àß p ‚àà RegularSupport Œ± g ‚àß RegularSupport Œ± g ‚äÜ closure W :=
by
  have U_in_nhds : U ‚àà ùìù p := by
    rw [mem_nhds_iff]
    use U

  let ‚ü®W', W'_in_nhds, W'_ss_U, W'_compact‚ü© := local_compact_nhds U_in_nhds

  -- This feels like black magic, but okay
  let ‚ü®W, _W_compact, W_closed, W'_ss_int_W, W_ss_U‚ü© := exists_compact_closed_between W'_compact U_open W'_ss_U
  have W_cl_eq_W : closure W = W := IsClosed.closure_eq W_closed

  have W_in_nhds : W ‚àà ùìù p := by
    rw [mem_nhds_iff]
    use interior W
    repeat' apply And.intro
    ¬∑ exact interior_subset
    ¬∑ simp
    ¬∑ exact W'_ss_int_W (mem_of_mem_nhds W'_in_nhds)

  use W

  repeat' apply And.intro
  exact W_in_nhds
  {
    rw [W_cl_eq_W]
    exact W_ss_U
  }

  have p_in_int_W : p ‚àà interior W := W'_ss_int_W (mem_of_mem_nhds W'_in_nhds)

  let ‚ü®g, g_in_rist, g_moves_p‚ü© := get_moving_elem_in_rigidStabilizer G isOpen_interior p_in_int_W

  use g
  repeat' apply And.intro
  ¬∑ apply rigidStabilizer_mono interior_subset
    simp
    exact g_in_rist
  ¬∑ rw [‚Üêmem_support] at g_moves_p
    apply support_subset_regularSupport
    exact g_moves_p
  ¬∑ rw [rigidStabilizer_support] at g_in_rist
    apply subset_trans
    exact regularSupport_subset_closure_support
    apply closure_mono
    apply subset_trans
    exact g_in_rist
    exact interior_subset

/--
## Proposition 3.2 : RegularSupportBasis is a topological basis of `Œ±`
-/
theorem RegularSupportBasis.isBasis :
  TopologicalSpace.IsTopologicalBasis (RegularSupportBasis G Œ±) :=
by
  apply TopologicalSpace.isTopologicalBasis_of_isOpen_of_nhds
  {
    intro U U_in_poset
    exact (RegularSupportBasis.regular U_in_poset).isOpen
  }
  intro p U p_in_U U_open

  let ‚ü®W, _, clW_ss_U, ‚ü®g, _, p_in_rsupp, rsupp_ss_clW‚ü©‚ü© := proposition_3_2_subset G Œ± U_open p_in_U
  use RegularSupport Œ± g
  repeat' apply And.intro
  ¬∑ exact ‚ü®p, p_in_rsupp‚ü©
  ¬∑ use {g}
    simp [RegularSupport.FiniteInter]
  ¬∑ assumption
  ¬∑ apply subset_trans
    exact rsupp_ss_clW
    exact clW_ss_U

theorem RegularSupportBasis.closed_inter (b1 b2 : Set Œ±)
  (b1_in_basis : b1 ‚àà RegularSupportBasis G Œ±)
  (b2_in_basis : b2 ‚àà RegularSupportBasis G Œ±)
  (inter_nonempty : Set.Nonempty (b1 ‚à© b2)) :
  (b1 ‚à© b2) ‚àà RegularSupportBasis G Œ± :=
by
  unfold RegularSupportBasis
  simp
  constructor
  assumption

  let ‚ü®_, ‚ü®s1, b1_eq‚ü©‚ü© := b1_in_basis
  let ‚ü®_, ‚ü®s2, b2_eq‚ü©‚ü© := b2_in_basis

  have dec_eq : DecidableEq G := Classical.typeDecidableEq G
  use s1 ‚à™ s2
  rw [RegularSupport.FiniteInter_sInter]
  rw [Finset.coe_union, Set.image_union, Set.sInter_union]
  repeat rw [‚ÜêRegularSupport.FiniteInter_sInter]
  rw [b2_eq, b1_eq]

theorem RegularSupportBasis.empty_not_mem :
  ‚àÖ ‚àâ RegularSupportBasis G Œ± :=
by
  intro empty_mem
  rw [RegularSupportBasis.mem_iff] at empty_mem
  exact Set.not_nonempty_empty empty_mem.left

theorem RegularSupportBasis.univ_mem [Nonempty Œ±]:
  Set.univ ‚àà RegularSupportBasis G Œ± :=
by
  rw [RegularSupportBasis.mem_iff]
  constructor
  exact Set.univ_nonempty
  use ‚àÖ
  simp [RegularSupport.FiniteInter]

end Basis
end Rubin
