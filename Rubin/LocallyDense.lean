import Mathlib.GroupTheory.Subgroup.Basic
import Mathlib.GroupTheory.GroupAction.Basic
import Mathlib.Topology.Basic
import Mathlib.Topology.Algebra.ConstMulAction

import Rubin.RigidStabilizer
import Rubin.InteriorClosure

namespace Rubin

open Topology

/--
A group action is said to be "locally dense" if for any open set `U` and `p ‚àà U`,
the closure of the orbit of `p` under the `RigidStabilizer G U` contains a neighborhood of `p`.

The definition provided here is an equivalent one, that does not require using filters.
See [`LocallyDense.from_rigidStabilizer_in_nhds`] and [`LocallyDense.rigidStabilizer_in_nhds`]
to translate from/to the original definition.

A weaker relationship, [`LocallyMoving`], is used whenever possible.
The main difference between the two is that `LocallyMoving` does not allow us to find a group member
`g ‚àà G` such that `g ‚Ä¢ p ‚â† p` ‚Äî it only allows us to know that `‚àÉ g ‚àà RigidStabilizer G U, g ‚â† 1`.
--/
class LocallyDense (G Œ± : Type _) [Group G] [TopologicalSpace Œ±] [MulAction G Œ±] :=
  isLocallyDense:
    ‚àÄ U : Set Œ±,
    IsOpen U ‚Üí
    ‚àÄ p ‚àà U,
    p ‚àà interior (closure (MulAction.orbit (RigidStabilizer G U) p))
#align is_locally_dense Rubin.LocallyDense

theorem LocallyDense.from_rigidStabilizer_in_nhds (G Œ± : Type _) [Group G] [TopologicalSpace Œ±] [MulAction G Œ±] :
  (‚àÄ U : Set Œ±, IsOpen U ‚Üí ‚àÄ p ‚àà U, closure (MulAction.orbit G‚Ä¢[U] p) ‚àà ùìù p) ‚Üí
  LocallyDense G Œ± :=
by
  intro hyp
  constructor
  intro U U_open p p_in_U

  have closure_in_nhds := hyp U U_open p p_in_U
  rw [mem_nhds_iff] at closure_in_nhds

  rw [mem_interior]
  exact closure_in_nhds

theorem LocallyDense.rigidStabilizer_in_nhds (G Œ± : Type _) [Group G] [TopologicalSpace Œ±]
  [MulAction G Œ±] [LocallyDense G Œ±]
  {U : Set Œ±} (U_open : IsOpen U) {p : Œ±} (p_in_U : p ‚àà U)
:
  closure (MulAction.orbit G‚Ä¢[U] p) ‚àà ùìù p :=
by
  rw [mem_nhds_iff]
  rw [<-mem_interior]
  apply LocallyDense.isLocallyDense <;> assumption

lemma LocallyDense.elem_from_nonEmpty {G Œ± : Type _} [Group G] [TopologicalSpace Œ±] [MulAction G Œ±] [LocallyDense G Œ±]:
  ‚àÄ {U : Set Œ±},
  IsOpen U ‚Üí
  Set.Nonempty U ‚Üí
  ‚àÉ p ‚àà U, p ‚àà interior (closure (MulAction.orbit G‚Ä¢[U] p)) :=
by
  intros U U_open H_ne
  exact ‚ü®H_ne.some, H_ne.some_mem, LocallyDense.isLocallyDense U U_open H_ne.some H_ne.some_mem‚ü©

/--
This is a stronger statement than `LocallyMoving.get_nontrivial_rist_elem`,
as here we are able to prove that the nontrivial element does move `p`.

The condition that `Filer.NeBot (ùìù[‚â†] p)` is automatically satisfied by the `HasNoIsolatedPoints` class.
--/
theorem get_moving_elem_in_rigidStabilizer (G : Type _) {Œ± : Type _}
  [Group G] [TopologicalSpace Œ±] [MulAction G Œ±] [LocallyDense G Œ±]
  [T1Space Œ±] {p : Œ±} [Filter.NeBot (ùìù[‚â†] p)]
  {U : Set Œ±} (U_open : IsOpen U) (p_in_U : p ‚àà U) :
  ‚àÉ g : G, g ‚àà G‚Ä¢[U] ‚àß g ‚Ä¢ p ‚â† p :=
by
  by_contra g_not_exist
  rw [<-Classical.not_forall_not] at g_not_exist
  simp at g_not_exist

  have orbit_singleton : MulAction.orbit (RigidStabilizer G U) p = {p} := by
    ext x
    rw [MulAction.mem_orbit_iff]
    rw [Set.mem_singleton_iff]
    simp
    constructor
    ¬∑ intro ‚ü®g, g_in_rist, g_eq_p‚ü©
      rw [g_not_exist g g_in_rist] at g_eq_p
      exact g_eq_p.symm
    ¬∑ intro x_eq_p
      use 1
      rw [x_eq_p, one_smul]
      exact ‚ü®Subgroup.one_mem _, rfl‚ü©

  have regular_orbit_empty : interior (closure (MulAction.orbit (RigidStabilizer G U) p)) = ‚àÖ := by
    rw [orbit_singleton]
    rw [closure_singleton]
    rw [interior_singleton]

  have p_in_regular_orbit := LocallyDense.isLocallyDense (G := G) U U_open p p_in_U
  rw [regular_orbit_empty] at p_in_regular_orbit
  exact p_in_regular_orbit

class LocallyMoving (G Œ± : Type _) [Group G] [TopologicalSpace Œ±] [MulAction G Œ±] :=
  locally_moving: ‚àÄ U : Set Œ±, IsOpen U ‚Üí Set.Nonempty U ‚Üí RigidStabilizer G U ‚â† ‚ä•
#align is_locally_moving Rubin.LocallyMoving

theorem LocallyMoving.get_nontrivial_rist_elem {G Œ± : Type _}
  [Group G]
  [TopologicalSpace Œ±]
  [MulAction G Œ±]
  [h_lm : LocallyMoving G Œ±]
  {U: Set Œ±}
  (U_open : IsOpen U)
  (U_nonempty : U.Nonempty) :
  ‚àÉ x : G, x ‚àà G‚Ä¢[U] ‚àß x ‚â† 1 :=
by
  have rist_ne_bot := h_lm.locally_moving U U_open U_nonempty
  exact (or_iff_right rist_ne_bot).mp (Subgroup.bot_or_exists_ne_one _)

theorem LocallyMoving.nontrivial_elem (G Œ± : Type _) [Group G] [TopologicalSpace Œ±]
  [MulAction G Œ±] [LocallyMoving G Œ±] [Nonempty Œ±] :
  ‚àÉ g: G, g ‚â† 1 :=
by
  let ‚ü®g, _, g_ne_one‚ü© := (get_nontrivial_rist_elem (G := G) (Œ± := Œ±) isOpen_univ Set.univ_nonempty)
  use g

theorem LocallyMoving.nontrivial {G Œ± : Type _} [Group G] [TopologicalSpace Œ±]
  [MulAction G Œ±] [LocallyMoving G Œ±] [Nonempty Œ±] : Nontrivial G where
  exists_pair_ne := by
    use 1
    simp only [ne_comm]
    exact nontrivial_elem G Œ±

variable {G Œ± : Type _}
variable [Group G]
variable [TopologicalSpace Œ±]
variable [MulAction G Œ±]
variable [ContinuousConstSMul G Œ±]
variable [FaithfulSMul G Œ±]

instance dense_locally_moving [T2Space Œ±]
  [H_nip : HasNoIsolatedPoints Œ±]
  [H_ld : LocallyDense G Œ±] :
  LocallyMoving G Œ±
where
  locally_moving := by
    intros U U_open H_nonempty
    by_contra h_rs
    have ‚ü®elem, ‚ü®_, some_in_orbit‚ü©‚ü© := H_ld.elem_from_nonEmpty U_open H_nonempty
    rw [h_rs] at some_in_orbit
    simp at some_in_orbit

lemma disjoint_nbhd [T2Space Œ±] {g : G} {x : Œ±} (x_moved: g ‚Ä¢ x ‚â† x) :
  ‚àÉ U: Set Œ±, IsOpen U ‚àß x ‚àà U ‚àß Disjoint U (g ‚Ä¢'' U) :=
by
  have ‚ü®V, W, V_open, W_open, gx_in_V, x_in_W, disjoint_V_W‚ü© := T2Space.t2 (g ‚Ä¢ x) x x_moved
  let U := (g‚Åª¬π ‚Ä¢'' V) ‚à© W
  use U
  constructor
  exact IsOpen.inter (smulImage_isOpen g‚Åª¬π V_open) W_open

  constructor
  {
    simp
    rw [mem_inv_smulImage]
    trivial
  }
  {
    apply Set.disjoint_of_subset
    ¬∑ apply Set.inter_subset_right
    ¬∑ intro y hy; show y ‚àà V

      rw [<-smul_inv_smul g y]
      rw [<-mem_inv_smulImage]

      rw [mem_smulImage] at hy
      simp at hy
      simp

      exact hy.left
    ¬∑ exact disjoint_V_W.symm
  }

lemma disjoint_nbhd_in [T2Space Œ±] {g : G} {x : Œ±} {V : Set Œ±}
  (V_open : IsOpen V) (x_in_V : x ‚àà V) (x_moved : g ‚Ä¢ x ‚â† x) :
  ‚àÉ U : Set Œ±, IsOpen U ‚àß x ‚àà U ‚àß U ‚äÜ V ‚àß Disjoint U (g ‚Ä¢'' U) :=
by
  have ‚ü®W, W_open, x_in_W, disjoint_W_img‚ü© := disjoint_nbhd x_moved
  use W ‚à© V
  simp
  constructor
  {
    apply IsOpen.inter <;> assumption
  }
  constructor
  {
    constructor <;> assumption
  }
  show Disjoint (W ‚à© V) (g ‚Ä¢'' W ‚à© V)
  apply Set.disjoint_of_subset
  ¬∑ exact Set.inter_subset_left W V
  ¬∑ show g ‚Ä¢'' W ‚à© V ‚äÜ g ‚Ä¢'' W
    rewrite [smulImage_inter]
    exact Set.inter_subset_left _ _
  ¬∑ exact disjoint_W_img

/--
## Proposition 3.1:

If a group action is faithful, continuous and "locally moving",
then `U ‚äÜ V` if and only if `G‚Ä¢[U] ‚â§ G‚Ä¢[V]` when `U` and `V` are regular.
--/
theorem rigidStabilizer_subset_iff (G : Type _) {Œ± : Type _} [Group G] [TopologicalSpace Œ±]
  [MulAction G Œ±] [ContinuousConstSMul G Œ±] [FaithfulSMul G Œ±]
  [h_lm : LocallyMoving G Œ±]
  {U V : Set Œ±} (U_reg : Regular U) (V_reg : Regular V):
  U ‚äÜ V ‚Üî G‚Ä¢[U] ‚â§ G‚Ä¢[V] :=
by
  constructor
  exact rigidStabilizer_mono
  intro rist_ss

  by_contra U_not_ss_V

  let W := U \ closure V
  have W_nonempty : Set.Nonempty W := by
    by_contra W_empty
    apply U_not_ss_V
    apply subset_from_diff_closure_eq_empty
    ¬∑ assumption
    ¬∑ exact U_reg.isOpen
    ¬∑ rw [Set.not_nonempty_iff_eq_empty] at W_empty
      exact W_empty
  have W_ss_U : W ‚äÜ U := by
    simp
    exact Set.diff_subset _ _
  have W_open : IsOpen W := by
    unfold_let
    rw [Set.diff_eq_compl_inter]
    apply IsOpen.inter
    simp
    exact U_reg.isOpen

  have ‚ü®f, f_in_ristW, f_ne_one‚ü© := h_lm.get_nontrivial_rist_elem W_open W_nonempty

  have f_in_ristU : f ‚àà RigidStabilizer G U := by
    exact rigidStabilizer_mono W_ss_U f_in_ristW

  have f_notin_ristV : f ‚àâ RigidStabilizer G V := by
    apply rigidStabilizer_compl f_ne_one
    apply rigidStabilizer_mono _ f_in_ristW
    calc
      W = U ‚à© (closure V)·∂ú := by unfold_let; rw [Set.diff_eq_compl_inter, Set.inter_comm]
      _ ‚äÜ (closure V)·∂ú := Set.inter_subset_right _ _
      _ ‚äÜ V·∂ú := by
        rw [Set.compl_subset_compl]
        exact subset_closure

  exact f_notin_ristV (rist_ss f_in_ristU)

/--
A corollary of the previous theorem is that the rigid stabilizers of two regular sets `U` and `V`
are equal if and only if `U = V`.
--/
theorem rigidStabilizer_eq_iff (G : Type _) [Group G] {Œ± : Type _} [TopologicalSpace Œ±]
  [MulAction G Œ±] [ContinuousConstSMul G Œ±] [FaithfulSMul G Œ±] [LocallyMoving G Œ±]
  {U V : Set Œ±} (U_reg : Regular U) (V_reg : Regular V):
  G‚Ä¢[U] = G‚Ä¢[V] ‚Üî U = V :=
by
  constructor
  ¬∑ intro rist_eq
    apply le_antisymm <;> simp only [Set.le_eq_subset]
    all_goals {
      rw [rigidStabilizer_subset_iff G] <;> try assumption
      rewrite [rist_eq]
      rfl
    }
  ¬∑ intro H_eq
    rw [H_eq]

theorem rigidStabilizer_empty_iff (G : Type _) [Group G] {Œ± : Type _} [TopologicalSpace Œ±]
  [MulAction G Œ±] [ContinuousConstSMul G Œ±] [FaithfulSMul G Œ±] [LocallyMoving G Œ±]
  {U : Set Œ±} (U_reg : Regular U) :
  G‚Ä¢[U] = ‚ä• ‚Üî U = ‚àÖ :=
by
  rw [<-rigidStabilizer_empty (Œ± := Œ±) (G := G)]
  exact rigidStabilizer_eq_iff G U_reg (regular_empty Œ±)

end Rubin
