import Mathlib.GroupTheory.Subgroup.Basic
import Mathlib.GroupTheory.GroupAction.Basic
import Mathlib.Topology.Basic
import Mathlib.Topology.Homeomorph
import Mathlib.Topology.Algebra.ConstMulAction
import Mathlib.Data.Set.Basic

import Rubin.MulActionExt

namespace Rubin

-- TODO: coe to / extend MulActionHom

/--
maps from `Œ±` to `Œ≤` which preserve both the topology (they are homeomorphisms)
and the group structure (they intertwine the actions of `G` on `Œ±` and `Œ≤`)
-/
structure EquivariantHomeomorph (G Œ± Œ≤ : Type _) [Group G] [TopologicalSpace Œ±]
    [TopologicalSpace Œ≤] [MulAction G Œ±] [MulAction G Œ≤] extends Homeomorph Œ± Œ≤ where
  equivariant : is_equivariant G toFun
#align equivariant_homeomorph Rubin.EquivariantHomeomorph

@[inherit_doc]
notation:25 Œ± " ‚âÉ‚Çú[" G "] " Œ≤ => EquivariantHomeomorph G Œ± Œ≤

variable {G : Type u} [Group G]
variable {Œ± : Type v} [TopologicalSpace Œ±] [MulAction G Œ±]
variable {Œ≤ : Type w} [TopologicalSpace Œ≤] [MulAction G Œ≤]

theorem equivariant_fun (h : EquivariantHomeomorph G Œ± Œ≤) :
    is_equivariant G h.toFun :=
  h.equivariant
#align equivariant_fun Rubin.equivariant_fun

theorem equivariant_inv (h : EquivariantHomeomorph G Œ± Œ≤) :
    is_equivariant G h.invFun :=
  by
  intro g x
  symm
  let e := congr_arg h.invFun (h.equivariant g (h.invFun x))
  rw [h.left_inv _, h.right_inv _] at e
  exact e
#align equivariant_inv Rubin.equivariant_inv

protected def symm (h : Œ± ‚âÉ‚Çú[G] Œ≤) : Œ≤ ‚âÉ‚Çú[G] Œ± where
  toHomeomorph := h.toHomeomorph.symm
  equivariant := equivariant_inv h

protected def refl : Œ± ‚âÉ‚Çú[G] Œ± where
  toHomeomorph := Homeomorph.refl Œ±
  equivariant := is_equivariant_refl

/-- Composition of two homeomorphisms. -/
protected def trans {Œ≥  : Type _} [TopologicalSpace Œ≥] [MulAction G Œ≥]
  (h‚ÇÅ : Œ± ‚âÉ‚Çú[G] Œ≤) (h‚ÇÇ : Œ≤ ‚âÉ‚Çú[G] Œ≥) : Œ± ‚âÉ‚Çú[G] Œ≥ where
  continuous_toFun := h‚ÇÇ.continuous_toFun.comp h‚ÇÅ.continuous_toFun
  continuous_invFun := h‚ÇÅ.continuous_invFun.comp h‚ÇÇ.continuous_invFun
  toEquiv := Equiv.trans h‚ÇÅ.toEquiv h‚ÇÇ.toEquiv
  equivariant := is_equivariant_trans h‚ÇÅ.toFun h‚ÇÇ.toFun h‚ÇÅ.equivariant h‚ÇÇ.equivariant

open Topology

-- Note: this sounds like a general enough theorem that it should already be in mathlib
lemma inter_of_open_subset_of_closure {Œ± : Type _} [TopologicalSpace Œ±] {U V : Set Œ±}
  (U_open : IsOpen U) (U_nonempty : Set.Nonempty U) (V_nonempty : Set.Nonempty V)
  (U_ss_clV : U ‚äÜ closure V) : Set.Nonempty (U ‚à© V) :=
by
  by_contra empty
  rw [Set.not_nonempty_iff_eq_empty] at empty
  rw [Set.nonempty_iff_ne_empty] at U_nonempty
  apply U_nonempty

  have clV_diff_U_ss_V : V ‚äÜ closure V \ U := by
    rw [Set.subset_diff]
    constructor
    exact subset_closure
    symm
    rw [Set.disjoint_iff_inter_eq_empty]
    exact empty
  have clV_diff_U_closed : IsClosed (closure V \ U) := by
    apply IsClosed.sdiff
    exact isClosed_closure
    assumption
  unfold closure at U_ss_clV
  simp at U_ss_clV
  specialize U_ss_clV (closure V \ U) clV_diff_U_closed clV_diff_U_ss_V

  rw [Set.subset_diff] at U_ss_clV
  rw [Set.disjoint_iff_inter_eq_empty] at U_ss_clV
  simp at U_ss_clV
  exact U_ss_clV.right

/--
Note: `ùìù[‚â†] x` is notation for `nhdsWithin x {[x]}·∂ú`, ie. the neighborhood of x not containing itself.
--/
class HasNoIsolatedPoints (Œ± : Type _) [TopologicalSpace Œ±] :=
  -- TODO: rename to nhdsWithin_ne_bot
  nhbd_ne_bot : ‚àÄ x : Œ±, ùìù[‚â†] x ‚â† ‚ä•
#align has_no_isolated_points Rubin.HasNoIsolatedPoints

instance has_no_isolated_points_neBot‚ÇÅ {Œ± : Type _} [TopologicalSpace Œ±] [h_nip: HasNoIsolatedPoints Œ±]
  (x: Œ±) : Filter.NeBot (ùìù[‚â†] x) where
  ne' := h_nip.nhbd_ne_bot x

theorem Filter.NeBot.choose {Œ± : Type _} (F : Filter Œ±) [Filter.NeBot F] :
  ‚àÉ S : Set Œ±, S ‚àà F :=
by
  have res := (Filter.inhabitedMem (Œ± := Œ±) (f := F)).default
  exact ‚ü®res.val, res.prop‚ü©


theorem TopologicalSpace.IsTopologicalBasis.contains_point {Œ± : Type _} [TopologicalSpace Œ±]
  {B : Set (Set Œ±)} (B_basis : TopologicalSpace.IsTopologicalBasis B) (p : Œ±) :
  ‚àÉ S : Set Œ±, S ‚àà B ‚àß p ‚àà S :=
by
  have nhds_basis := B_basis.nhds_hasBasis (a := p)

  rw [Filter.hasBasis_iff] at nhds_basis
  let ‚ü®S‚ÇÅ, S‚ÇÅ_in_nhds‚ü© := Filter.NeBot.choose (ùìù p)
  let ‚ü®S, ‚ü®‚ü®S_in_B, p_in_S‚ü©, _‚ü©‚ü© := (nhds_basis S‚ÇÅ).mp S‚ÇÅ_in_nhds
  exact ‚ü®S, S_in_B, p_in_S‚ü©

-- The collection of all the sets in `B` (a topological basis of `Œ±`), such that `p` is in them.
def TopologicalBasisContaining {Œ± : Type _} [TopologicalSpace Œ±]
  {B : Set (Set Œ±)} (B_basis : TopologicalSpace.IsTopologicalBasis B) (p : Œ±) : FilterBasis Œ±
where
  sets := {b ‚àà B | p ‚àà b}
  nonempty := by
    let ‚ü®S, S_in_B, p_in_S‚ü© := TopologicalSpace.IsTopologicalBasis.contains_point B_basis p
    use S
    simp
    tauto
  inter_sets := by
    intro S T ‚ü®S_in_B, p_in_S‚ü© ‚ü®T_in_B, p_in_T‚ü©

    have S_in_nhds := B_basis.mem_nhds_iff.mpr ‚ü®S, S_in_B, ‚ü®p_in_S, Eq.subset rfl‚ü©‚ü©
    have T_in_nhds := B_basis.mem_nhds_iff.mpr ‚ü®T, T_in_B, ‚ü®p_in_T, Eq.subset rfl‚ü©‚ü©

    have ST_in_nhds : S ‚à© T ‚àà ùìù p := Filter.inter_mem S_in_nhds T_in_nhds
    rw [B_basis.mem_nhds_iff] at ST_in_nhds
    let ‚ü®U, props‚ü© := ST_in_nhds
    use U
    simp
    simp at props
    tauto

theorem TopologicalBasisContaining.mem_iff {Œ± : Type _} [TopologicalSpace Œ±]
  {B : Set (Set Œ±)} (B_basis : TopologicalSpace.IsTopologicalBasis B) (p : Œ±) (S : Set Œ±) :
  S ‚àà TopologicalBasisContaining B_basis p ‚Üî S ‚àà B ‚àß p ‚àà S :=
by
  rw [<-FilterBasis.mem_sets]
  rfl

theorem TopologicalBasisContaining.mem_nhds {Œ± : Type _} [TopologicalSpace Œ±]
  {B : Set (Set Œ±)} (B_basis : TopologicalSpace.IsTopologicalBasis B) (p : Œ±) (S : Set Œ±) :
  S ‚àà TopologicalBasisContaining B_basis p ‚Üí S ‚àà ùìù p :=
by
  rw [TopologicalBasisContaining.mem_iff]
  rw [B_basis.mem_nhds_iff]
  intro ‚ü®S_in_B, p_in_S‚ü©
  use S

instance TopologicalBasisContaining.neBot {Œ± : Type _} [TopologicalSpace Œ±]
  {B : Set (Set Œ±)} (B_basis : TopologicalSpace.IsTopologicalBasis B) (p : Œ±) :
  Filter.NeBot (TopologicalBasisContaining B_basis p).filter where
  ne' := by
    intro empty_in
    rw [<-Filter.empty_mem_iff_bot, FilterBasis.mem_filter_iff] at empty_in
    let ‚ü®S, ‚ü®S_in_basis, S_ss_empty‚ü©‚ü© := empty_in
    rw [TopologicalBasisContaining.mem_iff] at S_in_basis
    exact S_ss_empty S_in_basis.right

-- Note: the definition of "convergence" in the article doesn't quite match with the definition of ClusterPt
-- Instead, `F ‚â§ nhds p` should be used.

-- Note: Filter.HasBasis is a stronger statement than just FilterBasis - it defines a two-way relationship between a filter and a property; if the property is true for a set, then any superset of it is part of the filter, and vice-versa.
-- With this, it's impossible for there to be a finer filter satisfying the property,
-- as is evidenced by `filter_eq`: stripping away the `Filter` allows us to uniquely reconstruct it from the property itself.

-- Proposition 3.3.1 trivially follows from `TopologicalSpace.IsTopologicalBasis.nhds_hasBasis` and `disjoint_nhds_nhds`: if `F.HasBasis (S ‚Üí S ‚àà B ‚àß p ‚àà S)` and `F.HasBasis (S ‚Üí S ‚àà B ‚àß q ‚àà S)`,
-- then one can prove that `F ‚â§ nhds x` and `F ‚â§ nhds y` ~> `F = ‚ä•`
-- Proposition 3.3.2 becomes simply `TopologicalSpace.IsTopologicalBasis.nhds_hasBasis`
-- Proposition 3.3.3 is a consequence of the structure of `HasBasis`

-- Proposition 3.4.1 can maybe be proven with `TopologicalSpace.IsTopologicalBasis.mem_closure_iff`?

-- The tricky part here though is that "F is an ultra(pre)filter on B" can't easily be expressed.
-- I should maybe define a Prop for it, and show that "F is an ultrafilter on B" + "F tends to a point p"
-- is equivalent to `TopologicalSpace.IsTopologicalBasis.nhds_hasBasis`.

-- The alternative is to only work with `Filter`, and state conditions with `Filter.HasBasis`,
-- since that will force the filter to be an ultraprefilter on B.

end Rubin
