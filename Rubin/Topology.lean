import Mathlib.GroupTheory.Subgroup.Basic
import Mathlib.GroupTheory.GroupAction.Basic
import Mathlib.Topology.Basic
import Mathlib.Topology.Homeomorph
import Mathlib.Data.Set.Basic

import Rubin.MulActionExt

namespace Rubin

class ContinuousMulAction (G Œ± : Type _) [Group G] [TopologicalSpace Œ±] [MulAction G Œ±] where
  continuous : ‚àÄ g : G, Continuous (fun x: Œ± => g ‚Ä¢ x)
#align continuous_mul_action Rubin.ContinuousMulAction

-- TODO: give this a notation?
structure EquivariantHomeomorph (G Œ± Œ≤ : Type _) [Group G] [TopologicalSpace Œ±]
    [TopologicalSpace Œ≤] [MulAction G Œ±] [MulAction G Œ≤] extends Homeomorph Œ± Œ≤ where
  equivariant : is_equivariant G toFun
#align equivariant_homeomorph Rubin.EquivariantHomeomorph

variable {G Œ± Œ≤ : Type _}
variable [Group G]
variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

theorem equivariant_fun [MulAction G Œ±] [MulAction G Œ≤]
    (h : EquivariantHomeomorph G Œ± Œ≤) :
    is_equivariant G h.toFun :=
  h.equivariant
#align equivariant_fun Rubin.equivariant_fun

theorem equivariant_inv [MulAction G Œ±] [MulAction G Œ≤]
    (h : EquivariantHomeomorph G Œ± Œ≤) :
    is_equivariant G h.invFun :=
  by
  intro g x
  symm
  let e := congr_arg h.invFun (h.equivariant g (h.invFun x))
  rw [h.left_inv _, h.right_inv _] at e
  exact e
#align equivariant_inv Rubin.equivariant_inv

open Topology

/--
Note: `ùìù[‚â†] x` is notation for `nhdsWithin x {[x]}·∂ú`, ie. the neighborhood of x not containing itself.
--/
class HasNoIsolatedPoints (Œ± : Type _) [TopologicalSpace Œ±] :=
  nhbd_ne_bot : ‚àÄ x : Œ±, ùìù[‚â†] x ‚â† ‚ä•
#align has_no_isolated_points Rubin.HasNoIsolatedPoints

instance has_no_isolated_points_neBot {Œ± : Type _} [TopologicalSpace Œ±] [h_nip: HasNoIsolatedPoints Œ±] (x: Œ±): Filter.NeBot (ùìù[‚â†] x) where
  ne' := h_nip.nhbd_ne_bot x

end Rubin
