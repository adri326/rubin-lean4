import Mathlib.GroupTheory.Subgroup.Basic
import Mathlib.GroupTheory.GroupAction.Basic
import Mathlib.Topology.Basic
import Mathlib.Topology.Homeomorph
import Mathlib.Data.Set.Basic

import Rubin.RigidStabilizer
import Rubin.MulActionExt
import Rubin.SmulImage
import Rubin.Support

namespace Rubin

section Continuity

-- TODO: don't have this extend MulAction
class ContinuousMulAction (G Œ± : Type _) [Group G] [TopologicalSpace Œ±] extends
    MulAction G Œ± where
  continuous : ‚àÄ g : G, Continuous (fun x: Œ± => g ‚Ä¢ x)
#align continuous_mul_action Rubin.ContinuousMulAction

-- TODO: give this a notation?
structure EquivariantHomeomorph (G Œ± Œ≤ : Type _) [Group G] [TopologicalSpace Œ±]
    [TopologicalSpace Œ≤] [MulAction G Œ±] [MulAction G Œ≤] extends Homeomorph Œ± Œ≤ where
  equivariant : is_equivariant G toFun
#align equivariant_homeomorph Rubin.EquivariantHomeomorph

variable {G Œ± Œ≤ : Type _}
variable [Group G]
variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

theorem equivariant_fun [MulAction G Œ±] [MulAction G Œ≤]
    (h : EquivariantHomeomorph G Œ± Œ≤) :
    is_equivariant G h.toFun :=
  h.equivariant
#align equivariant_fun Rubin.equivariant_fun

theorem equivariant_inv [MulAction G Œ±] [MulAction G Œ≤]
    (h : EquivariantHomeomorph G Œ± Œ≤) :
    is_equivariant G h.invFun :=
  by
  intro g x
  symm
  let e := congr_arg h.invFun (h.equivariant g (h.invFun x))
  rw [h.left_inv _, h.right_inv _] at e
  exact e
#align equivariant_inv Rubin.equivariant_inv

variable [ContinuousMulAction G Œ±]

theorem img_open_open (g : G) (U : Set Œ±) (h : IsOpen U): IsOpen (g ‚Ä¢'' U) :=
  by
  rw [Rubin.smulImage_eq_inv_preimage]
  exact Continuous.isOpen_preimage (Rubin.ContinuousMulAction.continuous g‚Åª¬π) U h

#align img_open_open Rubin.img_open_open

theorem support_open (g : G) [TopologicalSpace Œ±] [T2Space Œ±]
    [ContinuousMulAction G Œ±] : IsOpen (Support Œ± g) :=
  by
  apply isOpen_iff_forall_mem_open.mpr
  intro x xmoved
  rcases T2Space.t2 (g ‚Ä¢ x) x xmoved with ‚ü®U, V, open_U, open_V, gx_in_U, x_in_V, disjoint_U_V‚ü©
  exact
    ‚ü®V ‚à© (g‚Åª¬π ‚Ä¢'' U), fun y yW =>
      Disjoint.ne_of_mem
        disjoint_U_V
        (mem_inv_smulImage.mp (Set.mem_of_mem_inter_right yW))
        (Set.mem_of_mem_inter_left yW),
        IsOpen.inter open_V (Rubin.img_open_open g‚Åª¬π U open_U),
        ‚ü®x_in_V, mem_inv_smulImage.mpr gx_in_U‚ü©
    ‚ü©
#align support_open Rubin.support_open

end Continuity

-- TODO: come up with a name
section LocallyDense
open Topology

/--
Note: `ùìù[‚â†] x` is notation for `nhdsWithin x {[x]}·∂ú`, ie. the neighborhood of x not containing itself.

--/
class HasNoIsolatedPoints (Œ± : Type _) [TopologicalSpace Œ±] :=
  nhbd_ne_bot : ‚àÄ x : Œ±, ùìù[‚â†] x ‚â† ‚ä•
#align has_no_isolated_points Rubin.HasNoIsolatedPoints

instance has_no_isolated_points_neBot {Œ± : Type _} [TopologicalSpace Œ±] [h_nip: HasNoIsolatedPoints Œ±] (x: Œ±): Filter.NeBot (ùìù[‚â†] x) where
  ne' := h_nip.nhbd_ne_bot x

class LocallyDense (G Œ± : Type _) [Group G] [TopologicalSpace Œ±] extends MulAction G Œ± :=
  isLocallyDense:
    ‚àÄ U : Set Œ±,
    ‚àÄ p ‚àà U,
    p ‚àà interior (closure (MulAction.orbit (RigidStabilizer G U) p))
#align is_locally_dense Rubin.LocallyDense

lemma LocallyDense.nonEmpty {G Œ± : Type _} [Group G] [TopologicalSpace Œ±] [LocallyDense G Œ±]:
  ‚àÄ {U : Set Œ±},
  Set.Nonempty U ‚Üí
  ‚àÉ p ‚àà U, p ‚àà interior (closure (MulAction.orbit (RigidStabilizer G U) p)) :=
by
  intros U H_ne
  exact ‚ü®H_ne.some, H_ne.some_mem, LocallyDense.isLocallyDense U H_ne.some H_ne.some_mem‚ü©

end LocallyDense


end Rubin
